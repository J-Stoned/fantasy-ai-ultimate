# Multi-Service Dockerfile for Fantasy AI Microservices
# Optimized for production with minimal image sizes

# Base stage with common dependencies
FROM node:20-alpine AS base
RUN apk add --no-cache libc6-compat python3 make g++
WORKDIR /app
COPY package*.json ./
COPY tsconfig.json ./
RUN npm ci --production=false

# Builder stage
FROM base AS builder
COPY . .
RUN npm run build || true

# TURBO PREDICTIONS SERVICE
FROM tensorflow/tensorflow:2.15.0-gpu AS turbo-predictions
RUN apt-get update && apt-get install -y curl && \
    curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    apt-get clean && rm -rf /var/lib/apt/lists/*
WORKDIR /app
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/scripts ./scripts
COPY --from=builder /app/lib ./lib
COPY --from=builder /app/models ./models
COPY --from=builder /app/.env* ./
ENV NODE_ENV=production
ENV CUDA_VISIBLE_DEVICES=0
ENV TF_FORCE_GPU_ALLOW_GROWTH=true
CMD ["node", "--max-old-space-size=4096", "node_modules/.bin/tsx", "scripts/turbo-prediction-service.ts"]

# WEBSOCKET SERVICE
FROM node:20-alpine AS websocket
RUN apk add --no-cache libc6-compat
WORKDIR /app
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/lib/streaming ./lib/streaming
COPY --from=builder /app/.env* ./
ENV NODE_ENV=production
EXPOSE 8080
HEALTHCHECK --interval=10s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:8080/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); })"
CMD ["node", "node_modules/.bin/tsx", "lib/streaming/start-websocket-server.ts"]

# CONTINUOUS LEARNING SERVICE
FROM tensorflow/tensorflow:2.15.0-gpu AS ml-learning
RUN apt-get update && apt-get install -y curl && \
    curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs && \
    apt-get clean && rm -rf /var/lib/apt/lists/*
WORKDIR /app
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/scripts ./scripts
COPY --from=builder /app/lib ./lib
COPY --from=builder /app/models ./models
COPY --from=builder /app/.env* ./
ENV NODE_ENV=production
ENV CUDA_VISIBLE_DEVICES=0
ENV TF_FORCE_GPU_ALLOW_GROWTH=true
CMD ["node", "node_modules/.bin/tsx", "scripts/continuous-learning-service.ts"]

# DATA COLLECTOR SERVICE
FROM node:20-alpine AS data-collector
RUN apk add --no-cache libc6-compat
WORKDIR /app
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/scripts ./scripts
COPY --from=builder /app/lib ./lib
COPY --from=builder /app/.env* ./
ENV NODE_ENV=production
CMD ["node", "node_modules/.bin/tsx", "scripts/mega-data-collector-v3.ts"]

# MONITORING EXPORTER
FROM node:20-alpine AS monitoring
RUN apk add --no-cache libc6-compat
WORKDIR /app
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/scripts ./scripts
COPY --from=builder /app/lib ./lib
COPY --from=builder /app/.env* ./
ENV NODE_ENV=production
EXPOSE 9090
CMD ["node", "node_modules/.bin/tsx", "scripts/production-monitoring.ts"]