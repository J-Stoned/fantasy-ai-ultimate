user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 10000;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main buffer=16k;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    reset_timedout_connection on;
    client_body_timeout 10;
    client_header_timeout 10;
    send_timeout 10;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml application/atom+xml image/svg+xml;

    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;

    # DDoS Protection - Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn conn_limit_per_ip 100;
    limit_conn_status 429;

    # DDoS Protection - Request rate limiting
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=expensive_limit:10m rate=10r/m;
    
    # NFL Sunday surge zones (3x normal capacity)
    limit_req_zone $binary_remote_addr zone=nfl_sunday_api:10m rate=300r/m;
    limit_req_zone $binary_remote_addr zone=nfl_sunday_general:10m rate=30r/s;

    # Request body size limits
    client_max_body_size 10m;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;

    # Hide nginx version
    server_tokens off;

    # IP Whitelist for admin endpoints
    geo $admin_ip {
        default 0;
        # Add trusted IPs here
        # 10.0.0.0/8 1;
        # 192.168.0.0/16 1;
    }

    # Rate limit bypass for whitelisted IPs
    geo $limit_req_bypass {
        default 0;
        # Add IPs to bypass rate limiting
        # 10.0.0.0/8 1;
    }

    # Map for NFL Sunday detection (Sunday 1pm-8pm ET)
    map $time_iso8601 $is_nfl_sunday {
        default 0;
        ~^(.*)-(Sun)-(.*)T(1[3-9]|20):(.*)$ 1;
    }

    # Upstream configuration
    upstream fantasy_ai_backend {
        least_conn;
        server web:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Main server block
    server {
        listen 80;
        server_name fantasy-ai-ultimate.com;

        # Redirect to HTTPS
        return 301 https://$server_name$request_uri;
    }

    # HTTPS server block
    server {
        listen 443 ssl http2;
        server_name fantasy-ai-ultimate.com;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # CSP Header
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline'; img-src 'self' data: https: blob:; font-src 'self' data:; connect-src 'self' https://*.supabase.co wss://*.supabase.co https://api.sleeper.app; media-src 'self'; object-src 'none'; frame-ancestors 'none';" always;

        # Health check endpoint (no rate limiting)
        location /api/health {
            proxy_pass http://fantasy_ai_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            access_log off;
        }

        # Auth endpoints (strict rate limiting)
        location ~ ^/api/auth/ {
            limit_req zone=auth_limit burst=2 nodelay;
            limit_req_status 429;
            
            proxy_pass http://fantasy_ai_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API endpoints with conditional rate limiting
        location ~ ^/api/ {
            # Use NFL Sunday limits if applicable
            set $limit_zone "api_limit";
            if ($is_nfl_sunday = 1) {
                set $limit_zone "nfl_sunday_api";
            }
            
            limit_req zone=$limit_zone burst=20 nodelay;
            limit_req_status 429;
            
            # CORS headers for API
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
            add_header Access-Control-Max-Age 86400 always;
            
            if ($request_method = OPTIONS) {
                return 204;
            }
            
            proxy_pass http://fantasy_ai_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # WebSocket support for real-time features
        location /ws/ {
            limit_conn conn_limit_per_ip 5;
            
            proxy_pass http://fantasy_ai_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
        }

        # Static assets with caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://fantasy_ai_backend;
            proxy_set_header Host $host;
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # Block common attack patterns
        location ~ /\. {
            deny all;
            return 404;
        }

        location ~ /\.git {
            deny all;
            return 404;
        }

        location ~ /\.env {
            deny all;
            return 404;
        }

        # Admin endpoints (IP restricted)
        location /admin/ {
            if ($admin_ip = 0) {
                return 403;
            }
            
            proxy_pass http://fantasy_ai_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Default location
        location / {
            # General rate limiting with NFL Sunday support
            set $limit_zone "req_limit_per_ip";
            if ($is_nfl_sunday = 1) {
                set $limit_zone "nfl_sunday_general";
            }
            
            limit_req zone=$limit_zone burst=50 nodelay;
            limit_req_status 429;
            
            proxy_pass http://fantasy_ai_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Custom error pages
        error_page 429 /429.html;
        location = /429.html {
            root /usr/share/nginx/html;
            internal;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }

    # Status endpoint for monitoring (internal only)
    server {
        listen 127.0.0.1:8080;
        server_name localhost;

        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
    }
}